Program        ::= (Statement (";" | NEWLINE) )* Statement?
Statement      ::= Assignment | Expression

Assignment     ::= LValue "=" Expression
LValue         ::= Identifier
                 | Identifier "(" ParamList? ")"
                 | MemberAccess
                 | Indexing

Expression     ::= Conditional

Conditional    ::= LogicalOr ("?" Expression ":" Expression)?

LogicalOr      ::= LogicalAnd (("or" | "||") LogicalAnd)*
LogicalAnd     ::= Compare     (("and" | "&&") Compare)*

Compare        ::= Range (("==" | "!=" | "<" | "<=" | ">" | ">=") Range)*

Range          ::= AddSub (":" AddSub (":" AddSub)?)?
                  /*  a:b      or a:b:c  */

AddSub         ::= MulDiv (( "+" | "-" ) MulDiv)*

MulDiv         ::= Pow (( "*" | "/" | "%" | ".*" | "./" | ".%" ) Pow)*

Pow            ::= Unary ( ("^" | ".^") Unary )*
                  /* right-associative in evaluation */

Unary          ::= ( "+" | "-" | "not" | "!" ) Unary
                 | Postfix

Postfix        ::= Primary ( "!" | "'" )*
                  /* "!" factorial (postfix), "'" transpose */

Primary        ::= Number
                 | String
                 | Symbol
                 | Array
                 | Object
                 | FunctionCall
                 | Parenthesized
                 | UnitValue
                 | Indexing
                 | MemberAccess

FunctionCall   ::= Identifier "(" ArgList? ")"
                 | SummationCall

SummationCall  ::= "sigma" "(" Identifier "," Expression "," Expression "," Expression ")"
                  /* sigma(variable, start, end, expression) */

MemberAccess   ::= Primary "." Identifier

Indexing       ::= Primary "[" IndexList? "]"

IndexList      ::= IndexItem ("," IndexItem)*
IndexItem      ::= Expression
                 | Slice
Slice          ::= (Expression)? ":" (Expression)? (":" Expression)?

Parenthesized  ::= "(" Expression ")"

Array          ::= "[" (Expression ("," Expression)*)? "]"
Object         ::= "{" (Identifier ":" Expression
                        ("," Identifier ":" Expression)*)? "}"

UnitValue      ::= Number Unit
                 | "(" Expression ")" Unit
                 /* e.g., 2 cm, (3+4) N*m */

ParamList      ::= Identifier ("," Identifier)*
ArgList        ::= Expression ("," Expression)*

Symbol         ::= Identifier
Identifier     ::= Letter (Letter | Digit | "_")*
Number         ::= Digit+ ("." Digit+)? (("e"|"E") ("+"|"-")? Digit+)?
String         ::= "'" ( ~["'"] )* "'" | "\"" ( ~["\""] )* "\""

Letter         ::= "A".."Z" | "a".."z"
Digit          ::= "0".."9"
Unit           ::= Identifier ("/" Identifier | "*" Identifier)*
